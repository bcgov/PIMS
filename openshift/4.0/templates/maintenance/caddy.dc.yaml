---
kind: Template
apiVersion: v1
metadata:
  name: proxy-caddy-build-config
parameters:
  - name: NAME
    displayName: "Maintenance Caddy Name"
    description: "The name used for deployments in openshift."
    required: false
    value: "proxy-caddy"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "354028"
  - name: ROLE_NAME
    displayName: "Component Role Name"
    description: "The name of the application component role (e.g web, api, database, proxy)."
    required: true
    value: "proxy"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "dev"
  - name: APP_DOMAIN
    displayName: "Application Hostname"
    description:
      "The exposed hostname that will route to the the React frontend, if left blank a
      value will be defaulted."
    value: "proxy-caddy-pims-dev.apps.silver.devops.gov.bc.ca"
  - name: APP_PORT
    displayName: "Application Port"
    description: "The port used to communicate with the Pod"
    value: "2015"
objects:
  # Configure port communication to the pod.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      creationTimestamp:
      labels:
        name: ${NAME}
        app: ${NAME}
        env: ${ENV_NAME}
        role: ${ROLE_NAME}
    spec:
      ports:
        - name: 2015-tcp
          protocol: TCP
          port: 2015
          targetPort: 2015
      selector:
        app: ${NAME}
        deploymentconfig: ${NAME}
      type: ClusterIP
      sessionAffinity: None

  # Configure URL route to the service.
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${NAME}
        app: ${NAME}
        env: ${ENV_NAME}
        role: ${ROLE_NAME}
    spec:
      host: ${APP_DOMAIN}
      port:
        targetPort: ${APP_PORT}-tcp
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${NAME}
        weight: 100

  # Configure how the pod is deployed.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${NAME}
        app: ${NAME}
        env: ${ENV_NAME}
        role: ${ROLE_NAME}
    spec:
      strategy:
        type: Rolling
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        resources: {}
        activeDeadlineSeconds: 21600
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              namespace: "${PROJECT_NAMESPACE}-tools"
              name: "${NAME}:latest"
      replicas: 1
      revisionHistoryLimit: 10
      test: false
      selector:
        app: ${NAME}
        deploymentconfig: ${NAME}
      template:
        metadata:
          labels:
            app: ${NAME}
            deploymentconfig: ${NAME}
          annotations:
            openshift.io/generated-by: OpenShiftNewApp
        spec:
          containers:
            - name: ${NAME}
              image: " "
              ports:
                - containerPort: 2015
                  protocol: TCP
              resources: {}
              terminationMessagePath: "/dev/termination-log"
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler
