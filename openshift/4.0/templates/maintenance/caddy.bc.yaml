---
kind: Template
apiVersion: v1
metadata:
  name: proxy-caddy
parameters:
  - name: NAME
    displayName: "Maintenance Caddy Name"
    description: "The name displayed for this build in openshift"
    required: false
    value: proxy-caddy
  - name: ROLE_NAME
    displayName: Role Name
    description: The name of the application component role (e.g ui, web, api, database).
    required: true
    value: web-server
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "354028"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "tools"

  - name: GIT_REPO
    displayName: "GIT Repository URL"
    description: "URL to GitHub repo with static maintenance page content"
    required: false
    value: "https://github.com/bcgov/pims.git"
  - name: GIT_REF
    displayName: "Branch Name"
    description:
      "Set this to a branch name, tag or other ref of your repository if you
      are not using the default branch."
    required: false
    value: "dev"

  - name: IMG_SRC
    displayName: "Source Image Name"
    description: "Name of the source image"
    required: false
    value: "bcgov-s2i-caddy"
  - name: IMAGE_TAG
    displayName: "Image Tag Name"
    description: "The image tag that will be used for this deployment.
      This provides a way to setup an environment for other branches."
    value: "latest"

  - name: OUTPUT_IMAGE_TAG
    displayName: Output Image Tag
    description: The tag given to the built image.
    required: true
    value: latest

  - name: CPU_LIMIT
    displayName: Resources CPU Limit
    description: The resources CPU limit (in cores) for this build.
    required: true
    value: "1"
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use.
    required: true
    value: 6Gi
objects:
  # Location of the built image.
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${NAME}
        app: ${NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      lookupPolicy:
        local: false
    status:
      dockerImageRepository: ""

  # How to build the image.
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${NAME}.${GIT_REF}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${NAME}
        app: ${NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChange: {}
      runPolicy: SerialLatestOnly
      source:
        type: Git
        contextDir: maintenance
        git:
          uri: ${GIT_REPO}
          ref: ${GIT_REF}
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
            name: "${IMG_SRC}:${IMAGE_TAG}"
      output:
        to:
          kind: ImageStreamTag
          name: "${NAME}:${OUTPUT_IMAGE_TAG}"
      resources:
        limits:
          cpu: ${CPU_LIMIT}
          memory: ${MEMORY_LIMIT}
      postCommit: {}
      nodeSelector:
      successfulBuildsHistoryLimit: 5
      failedBuildsHistoryLimit: 5
