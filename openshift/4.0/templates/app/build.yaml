kind: Template
apiVersion: v1
metadata:
  name: pims-app-build
  annotations:
    openshift.io/display-name: Nginx with Node build
    description: Build template for a Nginx with Node build
    tags: pims,app
parameters:
  - name: SOLUTION_NAME
    displayName: Solution Group Name
    description: The name of the solution (e.g pims).
    required: true
    value: pims
  - name: APP_NAME
    displayName: Application Name
    description: The name of the application (e.g. app).
    required: true
    value: app

  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "354028"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "tools"

  - name: BUILDIMAGE_NAME
    displayName: "Source Image Name"
    description: "The image to use as the Builder Image."
    value: "nodejs-10-rhel7"
  - name: BUILDIMAGE_TAG
    displayName: "Source Image Tag"
    description: "The s2i image tag which is used to build the code."
    value: "1-30"

  - name: RUNTIMEIMAGE_NAME
    displayName: "Source Image Name"
    description: "The image to use as the Builder Image."
    value: "nginx-runtime"
  - name: RUNTIMEIMAGE_TAG
    displayName: "Source Image Tag"
    description: "The s2i image tag which is used to build the code."
    value: "latest"

  - name: GIT_SOURCE
    displayName: Git Source Identifier
    description: A way to identify different sources (i.e. "dev" or "jmf")
    required: true
    value: dev
  - name: GIT_URL
    displayName: "GIT Source Repo URL"
    description: "A GIT URL to your source code."
    required: true
    value: "https://github.com/bcgov/PIMS.git"
  - name: GIT_REF
    displayName: "Git Reference"
    description: "The git reference or branch."
    required: true
    value: "dev"
  - name: SOURCE_CONTEXT_DIR
    displayName: "Source Context Directory"
    description: "The source context directory."
    required: false
    value: "frontend"

  - name: OUTPUT_IMAGE_TAG
    displayName: "Output Image Tag"
    description: "The tag given to the built image."
    required: true
    value: "latest"

  - name: CPU_REQUEST
    displayName: Requested Minimum Resources CPU Limit
    description: The requested minimum resources CPU limit (in cores) for this build.
    required: true
    value: 20m
  - name: CPU_LIMIT
    displayName: Resources CPU Limit
    description: The resources CPU limit (in cores) for this build.
    required: true
    value: 500m
  - name: MEMORY_REQUEST
    displayName: Requested Minimum Memory Limit
    description: Minimum requested amount of memory the container can use.
    required: true
    value: 250Mi
  - name: MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the container can use.
    required: true
    value: 2Gi
objects:
  # Image stream for the built base image.
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}-base
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Keeps track of changes to the intermediate frontend artifacts image
    labels:
      name: ${SOLUTION_NAME}-${APP_NAME}-base
      app: ${SOLUTION_NAME}
      role: ${APP_NAME}
      env: ${ENV_NAME}

  # The build config that will be created and be named for the branch you created it for.
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}-base.${GIT_SOURCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Intermediate build that generates the frontend artifacts (html, javascript, images, etc)
    labels:
      name: ${SOLUTION_NAME}-${APP_NAME}-base.${GIT_SOURCE}
      app: ${SOLUTION_NAME}
      role: ${APP_NAME}
      env: ${ENV_NAME}
    spec:
      runPolicy: Parallel
      completionDeadlineSeconds: 1800
      triggers:
        - type: ImageChange
        - type: ConfigChange
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${GIT_REF}
        contextDir: ${SOURCE_CONTEXT_DIR}
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: ${BUILDIMAGE_NAME}:${BUILDIMAGE_TAG}
          incremental: false
      output:
        to:
          kind: ImageStreamTag
          name: ${SOLUTION_NAME}-${APP_NAME}-base:${OUTPUT_IMAGE_TAG}
      resources:
        requests:
          cpu: ${CPU_REQUEST}
          memory: ${MEMORY_REQUEST}
        limits:
          cpu: ${CPU_LIMIT}
          memory: ${MEMORY_LIMIT}

  # Image stream for the built image.
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Keeps track of changes to the final frontend image (embedded in nginx)
    labels:
      name: ${SOLUTION_NAME}-${APP_NAME}
      app: ${SOLUTION_NAME}
      role: ${APP_NAME}
      env: ${ENV_NAME}

  # The build config that will be created and be named for the branch you created it for.
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}.${GIT_SOURCE}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: This (final) build takes the generated frontend artifacts and serves them through a static web server (nginx)
    labels:
      name: ${SOLUTION_NAME}-${APP_NAME}.${GIT_SOURCE}
      app: ${SOLUTION_NAME}
      role: ${APP_NAME}
      env: ${ENV_NAME}
    spec:
      runPolicy: Parallel
      completionDeadlineSeconds: 1800
      triggers:
        - type: ImageChange
        - type: ConfigChange
      source:
        dockerfile: |-
          FROM ${SOLUTION_NAME}-${APP_NAME}-base:${OUTPUT_IMAGE_TAG}
          COPY * /tmp/app/dist/
          CMD  /usr/libexec/s2i/run
        images:
          - from:
              kind: ImageStreamTag
              name: ${SOLUTION_NAME}-${APP_NAME}-base:${OUTPUT_IMAGE_TAG}
            paths:
              - destinationDir: tmp
                sourcePath: "/opt/app-root/src/build/."
        type: Dockerfile
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: ${RUNTIMEIMAGE_NAME}:${RUNTIMEIMAGE_TAG}
        type: Docker
      output:
        to:
          kind: ImageStreamTag
          name: ${SOLUTION_NAME}-${APP_NAME}:${OUTPUT_IMAGE_TAG}
      resources:
        requests:
          cpu: ${CPU_REQUEST}
          memory: ${MEMORY_REQUEST}
        limits:
          cpu: ${CPU_LIMIT}
          memory: ${MEMORY_LIMIT}
