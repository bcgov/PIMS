apiVersion: v1
kind: Template
metadata:
  name: pims-app-deploy
  annotations:
    openshift.io/display-name: Nginx with Node build
    description: Deployment template for a React frontend application served through Nginx
    tags: pims,app,react,nginx
parameters:
 - name: SOLUTION_NAME
    displayName: Solution Group Name
    description: The name of the solution (e.g pims).
    required: true
    value: pims
  - name: APP_NAME
    displayName: Application Name
    description: The name of the application (e.g. app).
    required: true
    value: app
  - name: API_NAME
    displayName: API Application Name
    description: The name of the API application.
    required: true
    value: api

  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "354028"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "dev"

  - name: IMAGE_TAG
    displayName: "Image Tag Name"
    description: "The image tag that will be used for this deployment.
      This provides a way to setup an environment for other branches."
    value: "dev"

  - name: APP_DOMAIN
    displayName: "Application Hostname"
    description:
      "The exposed hostname that will route to the the React frontend, if left blank a
      value will be defaulted."
    value: "pims-dev.apps.silver.devops.gov.bc.ca"
  - name: APP_PORT
    displayName: "Application Port"
    description: "The port used to communicate with the Pod"
    value: "8080"

  - name: KEYCLOAK_REALM
    displayName: "Keycloak SSO realm"
    description: "Keycloak SSO realm, used by the frontend login."
    required: true
    value: xz0xtue5
  - name: KEYCLOAK_AUTHORITY_URL
    displayName: "Keycloak Authority URL"
    description: "The Keycloak authority URL."
    required: true
    value: "https://dev.oidc.gov.bc.ca/auth"

  - name: FILE_CONFIG_MOUNT_PATH
    displayName: "keycloak.json Mount Path"
    description: "The path to use to mount the config file."
    required: true
    value: "/tmp/app/dist/"
  - name: KEYCLOAK_CONFIG_FILE_NAME
    displayName: "keycloak.json Config File Name"
    description: "The name of the configuration file to be used for keycloak.json."
    required: true
    value: "keycloak.json"
  - name: NODE_ENV
    displayName: "Node Environment"
    description: "A way to identify within the app which environment the app is in"
    value: "production"

  - name: REAL_IP_FROM
    description:
      "OpenShift cluster private IP range in CIDR notation, used by Nginx
      ngx_http_realip_module."
    displayName: "OpenShift Cluster IP Range"
    required: true
    value: "172.51.0.0/16"

  - name: API_URL
    description:
      "The default URL to use when proxying requests to the application's
      API.  The value here will be overridden if a API_SERVICE_NAME is defined."
    displayName: "API URL"
    required: false
    value: ""
  - name: API_PATH
    description: "The root path for the API.  Used in conjunction with API_SERVICE_NAME."
    displayName: "API Path"
    required: true
    value: "/api"
  - name: API_SERVICE_NAME
    description: "The name of the api service in OpenShift"
    displayName: "API Path"
    required: true
    value: "pims-api"

  - name: REPLICAS
    displayName: "Pod Replicas"
    description: "Number of pod replicas to run"
    value: "2"

  - name: CPU_REQUEST
    displayName: "CPU Request"
    description: "Starting amount of CPU the container can use."
    value: "100m"
  - name: CPU_LIMIT
    displayName: "CPU Limit"
    description: "Maximum amount of CPU the container can use."
    value: "1"
  - name: MEMORY_REQUEST
    displayName: "Memory Request"
    description: "Starting amount of memory the container can use."
    value: "100Mi"
  - name: MEMORY_LIMIT
    displayName: "Memory Limit"
    description: "Maximum amount of memory the container can use."
    value: "2Gi"
objects:
  # Allow the app to communicate with the api.
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: pod-from-pod-permit-${SOLUTION_NAME}-${APP_NAME}-${API_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
    spec:
      #description: Allow api pod(s) to receive communication from app pod(s).
      podSelector:
        matchLabels:
          app: ${SOLUTION_NAME}
          role: ${API_NAME}
          env: ${ENV_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  app: ${SOLUTION_NAME}
                  role: ${APP_NAME}
                  env: ${ENV_NAME}

  # Open up ports to communicate with the app.
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Exposes and load balances the application pods.
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        app: ${SOLUTION_NAME}
        role: ${APP_NAME}
        env: ${ENV_NAME}
    spec:
      ports:
        - name: ${APP_PORT}-tcp
          port: ${{APP_PORT}}
          protocol: TCP
          targetPort: ${{APP_PORT}}
      selector:
        name: ${SOLUTION_NAME}-${APP_NAME}
        app: ${SOLUTION_NAME}
        role: ${APP_NAME}
        env: ${ENV_NAME}
      sessionAffinity: None
      type: ClusterIP

  # Keycloak configuration settings.
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}-sso
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Keycloak client JSON configuration
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}-sso
        app: ${SOLUTION_NAME}
        role: ${APP_NAME}
        env: ${ENV_NAME}
    type: Opaque
    data:
      keycloak.json: '{
        "realm": "${KEYCLOAK_REALM}",
        "auth-server-url": "${KEYCLOAK_AUTHORITY_URL}",
        "ssl-required": "external",
        "resource": "${SOLUTION_NAME}-${APP_NAME}",
        "public-client": true,
        "confidential-port": 0
        }'

  # Environment Variable configuration settings.
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}-env
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Environment variable configuration
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}-env
        app: ${SOLUTION_NAME}
        role: ${APP_NAME}
        env: ${ENV_NAME}
    type: Opaque
    data:
      environment.json: '{
        "env": "${NODE_ENV}"
        }'

  # How the app will be deployed to the pod.
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${SOLUTION_NAME}-${APP_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: "Defines how to deploy ${SOLUTION_NAME}-${APP_NAME}"
      labels:
        name: ${SOLUTION_NAME}-${APP_NAME}
        app: ${SOLUTION_NAME}
        role: ${APP_NAME}
        env: ${ENV_NAME}
    spec:
      replicas: ${{REPLICAS}}
      selector:
        name: ${SOLUTION_NAME}-${APP_NAME}
        app: ${SOLUTION_NAME}
        role: ${APP_NAME}
        env: ${ENV_NAME}
      strategy:
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          name: ${SOLUTION_NAME}-${APP_NAME}
          labels:
            name: ${SOLUTION_NAME}-${APP_NAME}
            app: ${SOLUTION_NAME}
            role: ${APP_NAME}
            env: ${ENV_NAME}
        spec:
          volumes:
            - name: "${SOLUTION_NAME}-${APP_NAME}-keycloak"
              configMap:
                name: ${SOLUTION_NAME}-${APP_NAME}-sso
                items:
                  - key: "${KEYCLOAK_CONFIG_FILE_NAME}"
                    path: "${KEYCLOAK_CONFIG_FILE_NAME}"
            - name: "${SOLUTION_NAME}-${APP_NAME}-envvars"
              configMap:
                name: ${SOLUTION_NAME}-${APP_NAME}-env
                items:
                  - key: "environment.json"
                    path: "environment.json"
          containers:
            - name: ${SOLUTION_NAME}-${APP_NAME}
              image: ""
              imagePullPolicy: Always
              ports:
                - containerPort: ${{APP_PORT}}
                  protocol: TCP
              env:
                - name: API_URL
                  value: ${API_URL}
                - name: API_SERVICE_NAME
                  value: ${API_SERVICE_NAME}
                - name: API_PATH
                  value: ${API_PATH}
                - name: RealIpFrom
                  value: ${REAL_IP_FROM}
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              volumeMounts:
                - name: "${SOLUTION_NAME}-${APP_NAME}-keycloak"
                  mountPath: "${FILE_CONFIG_MOUNT_PATH}${KEYCLOAK_CONFIG_FILE_NAME}"
                  subPath: "${KEYCLOAK_CONFIG_FILE_NAME}"
                - name: "${SOLUTION_NAME}-${APP_NAME}-envvars"
                  mountPath: "${FILE_CONFIG_MOUNT_PATH}environment.json"
                  subPath: "environment.json"
              livenessProbe:
                httpGet:
                  path: "/nginx_status"
                  port: ${{APP_PORT}}
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 60
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: "/nginx_status"
                  port: ${{APP_PORT}}
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 60
                periodSeconds: 10
                successThreshold: 1
                failureThreshold: 3
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${SOLUTION_NAME}-${APP_NAME}
            from:
              kind: ImageStreamTag
              namespace: "${PROJECT_NAMESPACE}-tools"
              name: "${SOLUTION_NAME}-${APP_NAME}:${IMAGE_TAG}"
