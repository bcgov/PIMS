#!groovy

// ------------------
// Pipeline Variables
// ------------------
def commonPipeline
def notify

def FE_COV_STASH = 'fe-test-coverage'
def API_COV_STASH = 'api-test-coverage'
def RELEASE_VERSION = ''

// --------------------
// Declarative Pipeline
// --------------------
pipeline {
  agent any
  options {
    disableResume()
    buildDiscarder(logRotator(numToKeepStr: '5')) // keep 5 builds only
  }
  environment {
    CI = 'true'

    // The name of the project namespace(s).
    NAME_SPACE = '354028'

    // This should match your monorepo folder structure
    API_DIRECTORY = "backend"
    FRONTEND_DIRECTORY = "frontend"
    MAINTENANCE_DIRECTORY = "maintenance"
    DEVOPS_DIRECTORY = "openshift/4.0"

    // SonarQube configuration
    SONARQUBE_URL_INT = 'http://sonarqube:9000'

    // Environment Variables that should be set in OpenShift
    // -----------------------------------------------------
    // The job identifier (i.e 'pr-5' OR 'dev' OR 'master')
    // OC_JOB_NAME = "dev"

    // Which environment to deploy to ('dev' OR 'test' OR 'prod').
    // DESTINATION = "dev"

    // The URI to the application being deployed.
    // VANITY_URL="https://pims-dev.apps.silver.devops.gov.bc.ca/"

    // To force asking for a release version before running the pipeline, set to "true"
    // ENABLE_VERSION_PROMPT = "false"

    ENABLE_VERSION_PROMPT = sh(script: 'echo "${ENABLE_VERSION_PROMPT:-false}"', returnStdout: true).trim()
    OC_JOB_NAME = sh(script: 'echo "${OC_JOB_NAME:-dev}"', returnStdout: true).trim()
    APP_NAME = sh(script: 'echo "${APP_NAME:-pims}"', returnStdout: true).trim()
    DESTINATION = sh(script: 'echo "${DESTINATION:-dev}"', returnStdout: true).trim()
    VANITY_URL = sh(script: 'echo "${VANITY_URL:-https://pims-dev.apps.silver.devops.gov.bc.ca/}"', returnStdout: true).trim()

    // To enable pipeline verbose debug output set to "true"
    DEBUG_OUTPUT = sh(script: 'echo "${DEBUG_OUTPUT:-false}"', returnStdout: true).trim()
  }
  stages {
    stage('Initialize') {
      steps {
        script {
          // load supporting functions from external script files
          commonPipeline = load "${DEVOPS_DIRECTORY}/pipelines/scripts/common.groovy"
          notify = load "${DEVOPS_DIRECTORY}/pipelines/scripts/notify.groovy"

          // Cancel any running builds in progress
          timeout(time: 10, unit: 'MINUTES') {
            echo 'Cancelling previous builds in progress...'
            commonPipeline.abortAllPreviousBuildsInProgress(currentBuild)
          }

          // ensure required secrets and credentials are available in the CI environment
          // [add more secrets here if needed...]
          sh "oc extract secret/rocket-chat-secrets --to=${env.WORKSPACE} --confirm"
          env.ROCKET_DEPLOY_WEBHOOK = readFile('rocket-deploy-webhook').trim()

          // initialize CI environment values
          env.CHANGELOG = commonPipeline.getChangeLog()

          // whether Build and Deploy stage should be skipped
          def api_changes = commonPipeline.hasDirectoryChanged('backend').toString()
          def fe_changes = commonPipeline.hasDirectoryChanged('frontend').toString()

          if (api_changes.equalsIgnoreCase('false') && fe_changes.equalsIgnoreCase('false')) {
            env.SKIP_BUILD = 'true'
          } else {
            env.SKIP_BUILD = 'false'
          }

          if (new Boolean(DEBUG_OUTPUT)) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }

    stage('Version Prompt') {
      when {
        anyOf {
          expression { env.GIT_BRANCH == 'origin/master' }
          expression { new Boolean(env.ENABLE_VERSION_PROMPT) }
        }
      }
      steps {
        script {
          timeout(time: 5, unit: 'MINUTES') {
            def version = input(message: 'Enter the version tag for this release', parameters: [
              string(name: 'RELEASE VERSION', defaultValue: '', description: '')
            ])
            if (version != '') {
              RELEASE_VERSION = version
            } else {
              error '***  No release version specified. Aborting pipeline.  ***'
            }
          }
        }
      }
    }

    stage('Force Build?') {
      when {
        expression { new Boolean(env.SKIP_BUILD) == true }
      }
      steps {
        script {
          try {
            timeout(time: 2, unit: 'MINUTES') {
              input(message: 'No code changes detected. Should we force the Build?', ok: 'Yes, we should')
            }
            env.SKIP_BUILD = 'false'
          } catch (err) {
            echo '[ci/cd]  No code changes. Skipping the Build stage...'
            env.SKIP_BUILD = 'true'
          }
        }
      }
    }

    // The ZAP scripts are installed on the root of the jenkins-slave-zap image.
    // When running ZAP from there the reports will be created in /zap/wrk/ by default.
    // ZAP has problems with creating the reports directly in the Jenkins
    // working directory, so they have to be copied over after the fact.
    stage('OWASP Scan') {
      agent { label 'owasp-zap' }
      steps {
        script {
          sh 'mkdir -p zap-output'
          def return_code = sh returnStatus: true, script: "/zap/zap-baseline.py -x zap-report.xml -r zap-report.html -t $VANITY_URL"
          sh 'cp /zap/wrk/zap-report.* ./zap-output/'
          echo "Exit value was - $return_code"
        }
      }
      post {
        always {
          publishHTML([
            allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
            reportDir: '/zap/wrk', reportFiles: 'zap-report.html', reportName: 'OWASP ZAP Scan', reportTitles: 'OWASP ZAP Scan'
          ])
          stash name: 'zap', includes: 'zap-output/*'
        }
      }
    }

    stage('Tests') {
      when {
        expression { new Boolean(env.SKIP_BUILD) == false }
      }
      options { timeout(time: 20, unit: 'MINUTES') }
      failFast true
      parallel {
        stage('Test Frontend') {
          agent { label 'jenkins-slave-npm' }
          steps {
            script {
              // pull code
              checkout scm

              echo 'Preparing the report for the publishing ...'
              unstash name: 'zap'

              commonPipeline.runFrontendTests()

              dir(DEVOPS_DIRECTORY) {
                sh "ZAP_REPORT=${WORKSPACE}/zap-output/zap-report.xml ./player.sh scan ${OC_JOB_NAME} -apply"
              }
              echo 'Frontend lint checks and tests passed'
            }
          }
          post {
            failure {
              error '*** Frontend lint checks and tests failed ***'
            }
          }
        }
        stage('Test Backend') {
          agent { label 'jenkins-slave-dotnet' }
          steps {
            script {
              dir(DEVOPS_DIRECTORY) {
                sh "./player.sh scan-dotnet ${OC_JOB_NAME} -apply"
              }
              echo 'Backend tests passed'
            }
          }
          post {
            failure {
              error '*** Backend tests failed ***'
            }
          }
        }
      }
    }

    stage('Build') {
      when {
        expression { new Boolean(env.SKIP_BUILD) == false }
      }
      options { timeout(time: 25, unit: 'MINUTES') }
      failFast true
      parallel {
        stage('Build Frontend') {
          steps {
            script {
              dir(DEVOPS_DIRECTORY) {
                sh "OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build app-base -apply"
                sh "OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build app -apply"
              }
            }
          }
        }
        stage('Build Backend') {
          steps {
            dir(DEVOPS_DIRECTORY) {
              sh "OC_JOB_NAME=${OC_JOB_NAME} ./player.sh build api -apply"
            }
          }
        }
      }
    }

    stage('Quality Gate') {
      when {
        expression { false } // skip this stage (for now)
      }
      options {
        timeout(time: 5, unit: 'MINUTES')
      }
      steps {
        //  TODO: Break the build if Quality Gate failed
        echo '...'
      }
    }

    stage('Deploy') {
      when {
        expression { new Boolean(env.SKIP_BUILD) == false }
      }
      options { timeout(time: 15, unit: 'MINUTES') }
      steps {
        script {
          def img_backend = "${APP_NAME}-api"
          def img_frontend = "${APP_NAME}-app"

          // tag release version (if provided)
          if (RELEASE_VERSION != '') {
            echo "Tagging images - ${img_backend}:latest, ${img_frontend}:latest..."
            sh "oc tag ${img_backend}:latest ${img_backend}:${RELEASE_VERSION}"
            sh "oc tag ${img_frontend}:latest ${img_frontend}:${RELEASE_VERSION}"
          } else {
            RELEASE_VERSION = 'latest'
          }

          dir(DEVOPS_DIRECTORY) {
            sh "RELEASE_TAG=${RELEASE_VERSION} ./player.sh deploy api ${DESTINATION} -apply"
            sh "RELEASE_TAG=${RELEASE_VERSION} ./player.sh deploy app ${DESTINATION} -apply"
          }
        }
      }
    }
  } // stages
  post {
    success {
      script {
        if (new Boolean(env.SKIP_BUILD) == false) {
          notify.success(APP_NAME.toUpperCase(), RELEASE_VERSION, DESTINATION.toUpperCase(), ROCKET_DEPLOY_WEBHOOK)
        }
      }
    }
    failure {
      script {
        notify.failure(APP_NAME.toUpperCase(), RELEASE_VERSION, DESTINATION.toUpperCase(), ROCKET_DEPLOY_WEBHOOK)
      }
    }
  } // post-stages
} // pipeline
