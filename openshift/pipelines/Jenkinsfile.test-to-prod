#!groovy

// ------------------
// Pipeline Variables
// ------------------
def cli
def notify
def RELEASE_VERSION

// --------------------
// Declarative Pipeline
// --------------------
pipeline {
  agent any
  options {
    disableResume()
    buildDiscarder(logRotator(numToKeepStr: "5")) // keep 5 builds only
  }
  environment {
    // To enable pipeline verbose debug output set to "true"
    DEBUG_OUTPUT = "true"

    CI = "true"
    PATHFINDER_URL = "pathfinder.gov.bc.ca"

    // The name of your application
    APP_NAME = "pims"

    // The name of the project namespace(s).
    NAME_SPACE = "jcxjin"

    // This should match your monorepo folder structure
    API_DIRECTORY = "backend"
    FRONTEND_DIRECTORY = "frontend"
    MAINTENANCE_DIRECTORY = "maintenance"
    DEVOPS_DIRECTORY = "openshift"

    // Environment Variables that should be set in OpenShift
    // -----------------------------------------------------

    // The tag used to identify the image we want to deploy.
    // RELEASE_TAG = "test"

    // Which environment to deploy to.
    // DESTINATION = "prod"

    // Which instance ID to deploy to (if using multiple instances per environment). Leave empty for default.
    // INSTANCE_ID = ""

    // The URI to the application being deployed.
    // VANITY_URL = "https://pims-prod.pathfinder.gov.bc.ca/"
  }
  stages {
    stage("Initialize") {
      steps {
        script {
          // load supporting functions from external script files
          cli = load "openshift/pipelines/scripts/common.groovy"
          notify = load "openshift/pipelines/scripts/notify.groovy"

          // ensure required secrets and credentials are available in the CI environment
          // [add more secrets here if needed...]
          sh "oc extract secret/rocket-chat-secrets --to=${env.WORKSPACE} --confirm"

          // initialize CI environment values
          env.ROCKET_DEPLOY_WEBHOOK = readFile("rocket-deploy-webhook").trim()

          if (DEBUG_OUTPUT.equalsIgnoreCase("true")) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }

    stage("Approval") {
      options { timeout(time: 1, unit: "HOURS") }
      input {
        message "Deploy to PROD?"
        ok "Yes, go ahead"
      }
      steps {
        echo "Promotion from TEST to PROD was approved. Proceeding..."
      }
    }

    stage("Version check") {
      steps {
        script {
          try {
            timeout(time: 10, unit: "MINUTES") {
              def app_tag = input(message: "Enter the desired version to release to PRODUCTION", parameters: [
                string(name: 'VERSION_TAG', defaultValue: '', description: 'Release Version')
              ])
              if (app_tag != '') {
                RELEASE_VERSION = app_tag
              } else {
                error "No version specified. Aborting..."
              }
            }
          } catch (err) {
            error "No version specified. Aborting..."
          }
        }
      }
    }

    stage("Maintenance mode ON") {
      steps {
        dir(MAINTENANCE_DIRECTORY) { sh "./maintenance.sh ${DESTINATION} on" }
      }
    }

    stage("Database backup") {
      steps {
        sh "./openshift/player.sh backup ${DESTINATION} apply"
      }
    }

    stage("Database migration") {
      options { timeout(time: 5, unit: "MINUTES") }
      steps {
        // pretend we are doing stuff - db backups etc
        sleep(30)
      }
    }

    stage("Promote to PROD") {
      options { timeout(time: 10, unit: "MINUTES") }
      // These env-vars are required by player.sh below
      environment {
        RELEASE_TAG="${RELEASE_VERSION}"
        TARGET_TAG="${DESTINATION}"
      }
      steps {
        script {
          sh "./openshift/player.sh deploy api apply"
          sh "./openshift/player.sh deploy app apply"
        }
      }
    }

    stage("Maintenance mode OFF") {
      steps {
        dir(MAINTENANCE_DIRECTORY) { sh "./maintenance.sh ${DESTINATION} off" }
      }
    }

    stage("DONE") {
      steps {
        echo "PRODUCTION deployment complete!"
      }
    }
  }
}
