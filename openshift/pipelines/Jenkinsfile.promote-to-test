#!groovy

// ------------------
// Pipeline Variables
// ------------------
def cli
def notify

// --------------------
// Declarative Pipeline
// --------------------
pipeline {
  agent none
  options {
    disableResume()
    buildDiscarder(logRotator(numToKeepStr: "5")) // keep 5 builds only
  }
  environment {
    // To enable pipeline verbose debug output set to "true"
    DEBUG_OUTPUT = "false"

    CI = "true"
    PATHFINDER_URL = "pathfinder.gov.bc.ca"
    VANITY_URL="https://pims-test.pathfinder.gov.bc.ca/"

    // The name of your application
    APP_NAME = "pims"

    // The name of the project namespace(s).
    NAME_SPACE = "jcxjin"

    // Deployment configurations used within this pipeline
    DEV_ENV = "dev"
    TEST_ENV = "test"

    // We are promoting DEV -> TEST with this pipeline
    SOURCE = "${DEV_ENV}"
    DESTINATION = "${TEST_ENV}"
  }
  stages {
    stage("Initialize") {
      agent any
      steps {
        script {
          // load supporting functions from external script files
          cli = load "openshift/pipelines/scripts/common.groovy"
          notify = load "openshift/pipelines/scripts/notify.groovy"

          // ensure required secrets and credentials are available in the CI environment
          // [add more secrets here if needed...]
          sh "oc extract secret/rocket-chat-secrets --to=${env.WORKSPACE} --confirm"

          // initialize CI environment values
          env.ROCKET_DEPLOY_WEBHOOK = readFile("rocket-deploy-webhook").trim()

          if (DEBUG_OUTPUT.equalsIgnoreCase("true")) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }
    stage("Wait for Approval") {
      agent any
      options {
        timeout(time: 1, unit: "HOURS")
      }
      input {
        message "Deploy to TEST?"
        ok "Yes, go ahead"
      }
      steps {
        echo "[ci/cd] Promotion from DEV to TEST was approved. Proceeding..."
      }
    }
    stage("Deploy API To TEST") {
      agent any
      options {
        timeout(time: 5, unit: "MINUTES")
      }
      environment {
        COMP_NAME = "api"
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def image_name = "${APP_NAME}-${COMP_NAME}"
              echo "[ci/cd]  Tagging ${image_name}:${SOURCE} for deployment to ${DESTINATION.toUpperCase()} ..."
              openshift.tag("${image_name}:${SOURCE}", "${image_name}:${DESTINATION}")
            }

            openshift.withProject("${NAME_SPACE}-${DESTINATION}") {
                def dc = openshift.selector("dc", [ app: APP_NAME, component: COMP_NAME ])
                echo "[ci/cd]  Found ${dc.count()} DeploymentConfigs: ${dc.names()}"
                // Wait for the deployment to complete.
                // This will wait until the desired replicas are all available
                dc.rollout().status()
            }
          }
        }
        echo "[ci/cd]  ${COMP_NAME.toUpperCase()} deployment complete!"
      }
    }
    stage("Deploy FRONTEND To TEST") {
      agent any
      options {
        timeout(time: 5, unit: "MINUTES")
      }
      environment {
        COMP_NAME = "app"
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def image_name = "${APP_NAME}-${COMP_NAME}"
              echo "[ci/cd]  Tagging ${image_name}:${SOURCE} for deployment to ${DESTINATION.toUpperCase()} ..."
              openshift.tag("${image_name}:${SOURCE}", "${image_name}:${DESTINATION}")
            }

            openshift.withProject("${NAME_SPACE}-${DESTINATION}") {
                def dc = openshift.selector("dc", [ app: APP_NAME, component: COMP_NAME ])
                echo "[ci/cd]  Found ${dc.count()} DeploymentConfigs: ${dc.names()}"
                // Wait for the deployment to complete.
                // This will wait until the desired replicas are all available
                dc.rollout().status()
            }
          }
        }
        echo "[ci/cd]  ${COMP_NAME.toUpperCase()} deployment complete!"
      }
    }
    stage("Send Notifications") {
      agent any
      steps {
        script {
          notify.deploySuccess(APP_NAME.toUpperCase(), DESTINATION.toUpperCase(), "", VANITY_URL, ROCKET_DEPLOY_WEBHOOK)
        }
      }
    }
  }
  post {
    aborted {
      node('master') {
        script {
          notify.deployFailure(APP_NAME.toUpperCase(), DESTINATION.toUpperCase(), "PIPELINE ABORTED", VANITY_URL, ROCKET_DEPLOY_WEBHOOK)
        }
    }
    }
    failure {
      node('master') {
        script {
          notify.deployFailure(APP_NAME.toUpperCase(), DESTINATION.toUpperCase(), "PIPELINE ERROR", VANITY_URL, ROCKET_DEPLOY_WEBHOOK)
        }
    }
    }
  }
}
