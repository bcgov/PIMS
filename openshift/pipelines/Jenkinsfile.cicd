#!groovy

// ------------------
// Pipeline Variables
// ------------------
def cli
def notify

// --------------------
// Declarative Pipeline
// --------------------
pipeline {
  agent none
  options {
    disableResume()
    buildDiscarder(logRotator(numToKeepStr: "5")) // keep 5 builds only
  }
  environment {
    // To enable pipeline verbose debug output set to "true"
    DEBUG_OUTPUT = "false"

    // Wait timeout in minutes
    WAIT_TIMEOUT = 10

    CI = "true"
    PATHFINDER_URL = "pathfinder.gov.bc.ca"
    VANITY_URL="https://pims-dev.pathfinder.gov.bc.ca/"

    // The name of your application
    APP_NAME = "pims"

    // This should match your monorepo folder structure
    API_CONTEXT_DIRECTORY = "backend"
    FRONTEND_CONTEXT_DIRECTORY = "frontend"

    // The name of the project namespace(s).
    NAME_SPACE = "jcxjin"

    // Deployment configurations used within this pipeline
    DEV_ENV = "dev"

    // We are building, then promoting to DEV with this pipeline
    // (source) -> (build output) -> DEV
    DESTINATION = "${DEV_ENV}"
  }
  stages {
    stage("Initialize") {
      agent any
      steps {
        script {
          // load supporting functions from external script files
          cli = load "openshift/pipelines/scripts/common.groovy"
          notify = load "openshift/pipelines/scripts/notify.groovy"

          // ensure required secrets and credentials are available in the CI environment
          // [add more secrets here if needed...]
          sh "oc extract secret/rocket-chat-secrets --to=${env.WORKSPACE} --confirm"

          // initialize CI environment values
          env.ROCKET_DEPLOY_WEBHOOK = readFile("rocket-deploy-webhook").trim()
          env.CHANGELOG = cli.getChangeLog()

          // back-end CI flags
          def api_changes = cli.hasDirectoryChanged(API_CONTEXT_DIRECTORY)
          env.API_HAS_CHANGES = api_changes.toString()
          env.API_FORCE_BUILD = "false"
          env.API_BUILT = "false"
          env.API_DEPLOYED = "false"

          // front-end CI flags
          def fe_changes = cli.hasDirectoryChanged(FRONTEND_CONTEXT_DIRECTORY)
          env.FRONTEND_HAS_CHANGES = fe_changes.toString()
          env.FRONTEND_FORCE_BUILD = "false"
          env.FRONTEND_BUILT = "false"
          env.FRONTEND_DEPLOYED = "false"

          if (DEBUG_OUTPUT.equalsIgnoreCase("true")) {
            // Force OpenShift Plugin directives to be verbose
            openshift.logLevel(1)

            // Print all environment variables
            echo 'DEBUG - All pipeline environment variables:'
            echo sh(returnStdout: true, script: 'env')
          }
        }
      }
    }
    stage("Force API Build?") {
      agent any
      when { environment name: "API_HAS_CHANGES", value: "false" }
      steps {
        script {
          try {
            timeout(time: 1, unit: "MINUTES") {
              input(message: "Should we force the API Build?", ok: "Yes, we should")
            }
            echo "[ci/cd]  The API build was forced..."
            env.API_FORCE_BUILD = "true"
          } catch (err) {
            echo "[ci/cd]  No API code changes. Skipping the API build..."
            env.API_FORCE_BUILD = "false"
          }
        }
      }
    }
    stage("Build API") {
      agent any
      environment {
        COMP_NAME = "api"
      }
      when {
        anyOf {
          environment name: "API_HAS_CHANGES", value: "true"
          environment name: "API_FORCE_BUILD", value: "true"
        }
      }
      steps {
        echo "[ci/cd]  Building API artifacts..."
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def apiSelector = openshift.selector("bc", [ app: APP_NAME, component: COMP_NAME ])
              if (!apiSelector.exists()) {
                throw new Exception("Could not find API build with labels: app='${APP_NAME}', component='${COMP_NAME}'")
              } else {
                timeout(WAIT_TIMEOUT) {
                  apiSelector.startBuild("-w")
                }
              }
            }
          }
        }
      }
      post {
        success {
          script {
            env.API_BUILT = "true"
          }
        }
      }
    }
    stage("Force FRONTEND Build?") {
      agent any
      when { environment name: "FRONTEND_HAS_CHANGES", value: "false" }
      steps {
        script {
          try {
            timeout(time: 1, unit: "MINUTES") {
              input(message: "Should we force the FRONTEND Build?", ok: "Yes, we should")
            }
            echo "[ci/cd]  The FRONTEND build was forced..."
            env.FRONTEND_FORCE_BUILD = "true"
          } catch (err) {
            echo "[ci/cd]  No FRONTEND code changes. Skipping the FRONTEND build..."
            env.FRONTEND_FORCE_BUILD = "false"
          }
        }
      }
    }
    stage("Build FRONTEND") {
      agent any
      environment {
        COMP_NAME = "app"
        WAIT_TIMEOUT = 20 // increase the timeout for this stage as it takes longer to build
      }
      when {
        anyOf {
          environment name: "FRONTEND_HAS_CHANGES", value: "true"
          environment name: "FRONTEND_FORCE_BUILD", value: "true"
        }
      }
      steps {
        echo "[ci/cd]  Building FRONTEND artifacts..."
        script {
          openshift.withCluster() {
            openshift.withProject() {
              // Build the base image. This image leverages Node to create a production build of the React frontend.
              def build_config = "${APP_NAME}-${COMP_NAME}-base-dev"
              def feBase = openshift.selector("bc", build_config)
              if (!feBase.exists()) {
                throw new Exception("Could not find FRONTEND-base build with name: '${build_config}'")
              } else {
                timeout(WAIT_TIMEOUT) {
                  feBase.startBuild("-w")
                }
              }

              // Build the runtime image. This image serves the compiled React artifacts via an NGINX web-server.
              def runtime_build_config = "${APP_NAME}-${COMP_NAME}-dev"
              def feRuntime = openshift.selector("bc", runtime_build_config)
              if (!feRuntime.exists()) {
                throw new Exception("Could not find FRONTEND-runtime build with name: '${runtime_build_config}'")
              } else {
                timeout(WAIT_TIMEOUT) {
                  feRuntime.startBuild("-w")
                }
              }
            }
          }
        }
      }
      post {
        success {
          script {
            env.FRONTEND_BUILT = "true"
          }
        }
      }
    }
    stage("Run Tests") {
      agent any
      when {
        anyOf {
          environment name: "API_BUILT", value: "true"
          environment name: "FRONTEND_BUILT", value: "true"
        }
      }
      steps {
        echo "[ci/cd]  Tests should be run here"
      }
    }
    stage("Deploy API to DEV") {
      agent any
      options {
        timeout(time: 5, unit: "MINUTES")
      }
      environment {
        COMP_NAME = "api"
      }
      when { environment name: "API_BUILT", value: "true" }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def image_name = "${APP_NAME}-${COMP_NAME}"
              // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
              // Tag the images for deployment based on the image's hash
              def hash = cli.getImageTagHash("${image_name}")
              echo "[ci/cd]  Tagging ${image_name}@${hash} for deployment to ${DESTINATION.toUpperCase()} ..."
              openshift.tag("${image_name}@${hash}", "${image_name}:${DESTINATION}")
            }

            openshift.withProject("${NAME_SPACE}-${DESTINATION}") {
                def dc = openshift.selector("dc", [ app: APP_NAME, component: COMP_NAME ])
                echo "[ci/cd]  Found ${dc.count()} DeploymentConfigs: ${dc.names()}"
                // Wait for the deployment to complete.
                // This will wait until the desired replicas are all available
                dc.rollout().status()
            }
          }
        }
        echo "[ci/cd]  Deployment done!"
      }
      post {
        success {
          script {
            env.API_DEPLOYED = "true"
          }
        }
      }
    }
    stage("Deploy FRONTEND to DEV") {
      agent any
      options {
        timeout(time: 5, unit: "MINUTES")
      }
      environment {
        COMP_NAME = "app"
      }
      when { environment name: "FRONTEND_BUILT", value: "true" }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def image_name = "${APP_NAME}-${COMP_NAME}"
              // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
              // Tag the images for deployment based on the image's hash
              def hash = cli.getImageTagHash("${image_name}")
              echo "[ci/cd]  Tagging ${image_name}@${hash} for deployment to ${DESTINATION.toUpperCase()} ..."
              openshift.tag("${image_name}@${hash}", "${image_name}:${DESTINATION}")
            }

            openshift.withProject("${NAME_SPACE}-${DESTINATION}") {
                def dc = openshift.selector("dc", [ app: APP_NAME, component: COMP_NAME ])
                echo "[ci/cd]  Found ${dc.count()} DeploymentConfigs: ${dc.names()}"
                // Wait for the deployment to complete.
                // This will wait until the desired replicas are all available
                dc.rollout().status()
            }
          }
        }
        echo "[ci/cd]  Deployment done!"
      }
      post {
        success {
          script {
            env.FRONTEND_DEPLOYED = "true"
          }
        }
      }
    }
    stage("Send Notifications") {
      agent any
      when {
        anyOf {
          environment name: "API_DEPLOYED", value: "true"
          environment name: "FRONTEND_DEPLOYED", value: "true"
        }
      }
      steps {
        script {
          if (env.API_DEPLOYED.equalsIgnoreCase("true")) {
            notify.deploySuccess("${APP_NAME.toUpperCase()} API", DESTINATION.toUpperCase(), CHANGELOG, VANITY_URL, ROCKET_DEPLOY_WEBHOOK)
          }
          if (env.FRONTEND_DEPLOYED.equalsIgnoreCase("true")) {
            notify.deploySuccess("${APP_NAME.toUpperCase()} FRONTEND", DESTINATION.toUpperCase(), CHANGELOG, VANITY_URL, ROCKET_DEPLOY_WEBHOOK)
          }
        }
      }
    }
    stage("No Changes") {
      agent any
      when {
        allOf {
          environment name: "API_DEPLOYED", value: "false"
          environment name: "FRONTEND_DEPLOYED", value: "false"
        }
      }
      steps {
        script {
          echo "[ci/cd]  No changes ..."
          currentBuild.result = 'ABORTED'
          notify.noChanges(APP_NAME.toUpperCase(), DESTINATION.toUpperCase(), ROCKET_DEPLOY_WEBHOOK)
        }
      }
    }
  }
  post {
    aborted {
      node('master') {
        script {
          notify.deployFailure(APP_NAME.toUpperCase(), DESTINATION.toUpperCase(), "PIPELINE ABORTED", VANITY_URL, ROCKET_DEPLOY_WEBHOOK)
        }
    }
    }
    failure {
      node('master') {
        script {
          notify.deployFailure(APP_NAME.toUpperCase(), DESTINATION.toUpperCase(), "PIPELINE ERROR", VANITY_URL, ROCKET_DEPLOY_WEBHOOK)
        }
      }
    }
  }
}
