kind: Template
apiVersion: v1
metadata:
  name: bcgov-s2i-caddy
parameters:
  - name: NAME
    displayName: "Name"
    description:
      "The name assigned to all of the frontend objects defined in this template. You
      should keep this as default unless your know what your doing."
    required: true
    value: "bcgov-s2i-caddy"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "354028"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "tools"

  - name: GIT_REPO_URL
    displayName: Git Repo URL
    description:
      "The URL to your GIT repo, don't use the this default unless your just
      experimenting."
    required: true
    value: "https://github.com/BCDevOps/s2i-caddy.git"
  - name: GIT_REF
    displayName: Git Reference
    description: The git reference or branch.
    required: true
    value: master
  - name: SOURCE_CONTEXT_DIR
    displayName: Source Context Directory
    description: The source context directory.
    value: ""

  - name: OUTPUT_IMAGE_TAG
    displayName: Output Image Tag
    description: The tag given to the built image.
    required: true
    value: latest
objects:
  # Where to keep the built image.
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${NAME}
        app: ${NAME}
        env: ${ENV_NAME}

  # How to build the image.
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      labels:
        name: ${NAME}
        app: ${NAME}
        env: ${ENV_NAME}
    strategy:
      dockerStrategy:
        forcePull: true
    spec:
      runPolicy: Serial
      source:
        type: Git
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO_URL}
        contextDir: ${SOURCE_CONTEXT_DIR}
      strategy:
        type: Docker
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}:${OUTPUT_IMAGE_TAG}
      resources: {}
      postCommit: {}
