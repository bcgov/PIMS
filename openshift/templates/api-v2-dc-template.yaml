apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: pims-api-v2-template
labels:
  template: pims-api-v2-template
objects:
- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    annotations:
      app.openshift.io/connects-to: pims-database
    name: pims-api-v2
    namespace: ${LICENSE_PLATE}-${ENVIRONMENT}
    labels:
      app: pims-v2
      app.kubernetes.io/part-of: pims-v2
      env: ${ENVIRONMENT}
      name: pims-api-v2
      role: api
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 600
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
      activeDeadlineSeconds: 21600
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - pims-api-v2
          from:
            kind: ImageStreamTag
            namespace: ${LICENSE_PLATE}-tools
            name: 'pims-api-v2:${IMAGE_TAG}'
    replicas: 2
    revisionHistoryLimit: 10
    test: false
    selector:
      app: pims-v2
      env: ${ENVIRONMENT}
      instance: ''
      role: api
    template:
      metadata:
        name: pims-api-v2
        creationTimestamp: null
        annotations:
          vault.hashicorp.com/agent-inject: 'true'
          vault.hashicorp.com/agent-inject-token: 'false'
          vault.hashicorp.com/agent-pre-populate-only: 'true'
          vault.hashicorp.com/auth-path: 'auth/k8s-silver'
          vault.hashicorp.com/namespace: 'platform-services'
          vault.hashicorp.com/role: ${LICENSE_PLATE}-${VAULT_ENVIRONMENT} 
          vault.hashicorp.com/agent-inject-secret-pims-secrets-${ENVIRONMENT}: ${LICENSE_PLATE}-${VAULT_ENVIRONMENT}/pims-secrets-${ENVIRONMENT}
          vault.hashicorp.com/agent-inject-template-pims-secrets-${ENVIRONMENT}: |
            {{- with secret "${LICENSE_PLATE}-${VAULT_ENVIRONMENT}/pims-secrets-${ENVIRONMENT}" }}
            export CSS_API_CLIENT_ID="{{ .Data.data.CSS_API_CLIENT_ID }}"
            export CSS_API_CLIENT_SECRET="{{ .Data.data.CSS_API_CLIENT_SECRET }}"
            export GEOCODER_KEY="{{ .Data.data.GEOCODER_KEY }}"
            export SSO_AUTH_SERVER_URL="{{ .Data.data.SSO_AUTH_SERVER_URL }}"
            export SSO_CLIENT_ID="{{ .Data.data.SSO_CLIENT_ID }}"
            export SSO_CLIENT_SECRET="{{ .Data.data.SSO_CLIENT_SECRET }}"
            export SSO_ENVIRONMENT="{{ .Data.data.SSO_ENVIRONMENT }}"
            export SSO_INTEGRATION_ID="{{ .Data.data.SSO_INTEGRATION_ID }}"
            export POSTGRES_DB="{{ .Data.data.POSTGRES_DB }}"
            export POSTGRES_USER="{{ .Data.data.POSTGRES_USER }}"
            export POSTGRES_PASSWORD="{{ .Data.data.POSTGRES_PASSWORD }}"
            {{- end }}
        labels:
          app: pims-v2
          env: ${ENVIRONMENT}
          instance: ''
          name: pims-api-v2
          role: api
      spec:
        serviceAccountName: 354028-vault
        containers:
          - resources:
              limits:
                cpu: 250m
                memory: 1Gi
            requests:
                cpu: 50m
                memory: 100Mi
            readinessProbe:
              httpGet:
                path: /v2/health
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 30
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            terminationMessagePath: /dev/termination-log
            name: pims-api-v2
            command:
              ['sh', '-c']
            args:
              ['. /vault/secrets/pims-secrets-${ENVIRONMENT} && node src/server.js']
            livenessProbe:
              httpGet:
                path: /v2/health
                port: 5000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 30
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
            env:
            - name: FRONTEND_URL
              valueFrom:
                configMapKeyRef:
                  name: pims-v2
                  key: FRONTEND_URL
            - name: BACKEND_URL
              valueFrom:
                configMapKeyRef:
                  name: pims-v2
                  key: BACKEND_URL
            - name: POSTGRES_SERVICE
              valueFrom:
                configMapKeyRef:
                  name: pims-v2
                  key: POSTGRES_SERVICE
            ports:
              - containerPort: 5000
                protocol: TCP
            imagePullPolicy: IfNotPresent
            terminationMessagePolicy: File
            image: image-registry.openshift-image-registry.svc:5000/${LICENSE_PLATE}-tools/pims-api-v2:${IMAGE_TAG}
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
        schedulerName: default-scheduler


parameters:
  - description: Environment
    displayName: Environment
    name: ENVIRONMENT
    required: true
    value: dev
  - description: License Plate
    displayName: License Plate
    name: LICENSE_PLATE
    required: true
  - description: Vault Environment
    displayName: Vault Environment
    name: VAULT_ENVIRONMENT
    required: true
    value: nonprod
  - description: ImageTag
    displayName: ImageTag
    name: IMAGE_TAG
    required: true
