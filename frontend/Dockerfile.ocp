# ================================= #
# 🐳🐳    [1/2] NODE BASE    🐳🐳 #
# ================================= #
FROM image-registry.apps.silver.devops.gov.bc.ca/354028-tools/nodejs:18.16-bullseye-slim as node

# Set the working directory to /app
WORKDIR /app
ENV NODE_ENV=production

# Copy the frontend build artifacts into the container
COPY . .

# Npm install packages. Omits dev dependencies when NODE_ENV=production
RUN npm set progress=false
RUN npm i

USER 1001
EXPOSE 8080

# Build the project.
RUN npm run build

# # ================================= #
# # 🐳🐳   [2/2] PROD NGINX    🐳🐳 #
# # ================================= #

# # Source: https://hub.docker.com/layers/library/nginx/alpine-slim/images/sha256-0f859db466fda2c52f62b48d0602fb26867d98edbd62c26ae21414b3dea8d8f4?context=explore
# FROM nginx:alpine-slim

# # Copy nginx configuration.
# COPY ./nginx.conf /etc/nginx/conf.d/default.conf

# # Set working directory to nginx asset directory.
# WORKDIR /usr/share/nginx/html

# # Remove default nginx static assets.
# RUN rm -rf ./*

# # Copy static assets from build stage.
# COPY --from=node /app/build .

# # Provide nginx directory the required permissions.
# RUN chmod g+rwx /var/cache/nginx /var/run /var/log/nginx

# # Run nginx with global directives and daemon off.
# ENTRYPOINT ["nginx", "-g", "daemon off;"]
