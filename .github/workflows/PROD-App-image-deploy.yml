# GitHub Actions workflow for deploying APP image to PROD env
name: PROD APP-Image Deploy

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image Tag to deploy'
        required: true

env:
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}
  ENVIRONMENT: 'prod'
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_SA_PROD_TOKEN }}


jobs:
  # Job to deploy APP image to OpenShift
  Deploy-To-OpenShift:
    name: Deploy to OpenShift
    runs-on: ubuntu-latest
  
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3 
    
      # Login to OpenShift
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          namespace: ${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }}

      # Process and Apply APP DeploymentConfig
      - name: Process and Apply APP DeploymentConfig
        env:
          NAMESPACE: "${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }}"
          DC_TEMPLATE: "app-dc-template.yaml"
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          APPLICATION_NAME: "pims-app"
          LICENSE_PLATE: "${{ secrets.LICENSE_PLATE }}"
        run: |
          ./.github/helpers/deploy.sh 

  # Job to check the health of the deployed APP          
  Health-Check:
    name: Check Deployment Health
    runs-on: ubuntu-latest
    needs: [ Deploy-To-OpenShift ]
    steps:
      # Login to OpenShift
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: github-actions
          OPENSHIFT_PROJECT: ${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }}
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          namespace: ${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }}

      # Check Deployment Status
      - name: Check Deployment Status
        run: |
          oc rollout status -n ${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }} dc/pims-app --watch

  # Job to clean up previous objects in OpenShift
  Clean-Up:
    name: Clean Up
    runs-on: ubuntu-latest
    needs: [ Health-Check ]
    steps:
      # Login to OpenShift
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        env:
          OPENSHIFT_USER: github-actions
          OPENSHIFT_PROJECT: ${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }}
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
          openshift_token: ${{ env.OPENSHIFT_TOKEN }}
          namespace: ${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }}

      # Remove previous objects
      - name: Remove previous objects
        run: |
          oc delete pod -n ${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }} --field-selector status.phase=Succeeded

      # Remove previous replication controllers
      - name: Remove previous replication controllers
        run: |
          oc delete rc -n ${{ format('{0}-{1}', secrets.LICENSE_PLATE, env.ENVIRONMENT) }} --field-selector status.replicas=0

  # Job to update the wiki with deployed image tag information
  Update_Wiki_Tags:
    needs: [ Health-Check ]
    name: Update table in wiki
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Clone wiki repository
      - name: Clone wiki repository
        run: |
          echo "Cloning wiki repo https://github.com/$GITHUB_REPOSITORY.wiki.git"
          git clone "https://$GITHUB_ACTOR:$GH_TOKEN@github.com/$GITHUB_REPOSITORY.wiki.git" ./wiki
      
      # Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10' 

      # Run update wiki python script
      - name: Run update wiki python script
        run: python ./.github/helpers/update-wiki-table.py ./wiki/Image-tags.md APP "Deployed Image Tag in PROD" "${{ env.IMAGE_TAG }}"

      # Commit and push changes to wiki
      - name: Commit and push changes to wiki
        run: |
          cd ./wiki
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          git add .
          if git diff-index --quiet HEAD; then
            echo "Nothing changed"
            exit 0
          fi
          echo "Pushing changes to wiki"
          git commit -m "Value populated at Deploy App" && git push "https://$GITHUB_ACTOR:$GH_TOKEN@github.com/$GITHUB_REPOSITORY.wiki.git"
