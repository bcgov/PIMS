name: Create JIRA Dependency Tickets
# This workflow creates JIRA tickets for any issues found during the validate workflow.

on:
    workflow_run:
        workflows: ['NPM Dependency Reports']
        types: [completed]
        branches:
            - 'main'
    pull_request:
        branches:
            - 'main'
        types: [synchronize]
    workflow_dispatch:

jobs:
    deploy:
        runs-on: ubuntu-latest
        # if: ${{ github.event.workflow_run.conclusion == 'success' }}
        steps: 
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Get API NPM Dependency Issues
              id: get_api_issue
              run: |
                # Get issue content
                ISSUES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues?state=open")
                
                # Debug: Check what issues we're getting
                echo "Found issues:"
                echo "$ISSUES_JSON" | jq -r '.[].title'
                
                # Extract API content
                API_CONTENT=$(echo "$ISSUES_JSON" | jq -r '.[] | select(.title == "express-api NPM Dependency Report") | .body')
                
                # Debug: Check if API content was found
                if [ -z "$API_CONTENT" ]; then
                  echo "⚠️ API Content not found!"
                else
                  echo "✅ API Content found, length: $(echo "$API_CONTENT" | wc -c) characters"
                  echo "First 100 chars: $(echo "$API_CONTENT" | head -c 100)..."
                fi
                
                # Store the content in an environment variable for use in the next steps
                echo "API_CONTENT<<EOF" >> $GITHUB_ENV
                echo "$API_CONTENT" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
                
                # Set a simple test variable to verify environment variable functionality
                echo "API_TEST=API_TEST_VALUE" >> $GITHUB_ENV
            
            - name: Get APP NPM Dependency Issues
              id: get_app_issue
              run: |
                # Get issue content
                ISSUES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues?state=open")
                
                # Extract APP content
                APP_CONTENT=$(echo "$ISSUES_JSON" | jq -r '.[] | select(.title == "react-app NPM Dependency Report") | .body')
                
                # Debug: Check if APP content was found
                if [ -z "$APP_CONTENT" ]; then
                  echo "⚠️ APP Content not found!"
                else
                  echo "✅ APP Content found, length: $(echo "$APP_CONTENT" | wc -c) characters"
                  echo "First 100 chars: $(echo "$APP_CONTENT" | head -c 100)..."
                fi
                
                # Store the content in an environment variable for use in the next steps
                echo "APP_CONTENT<<EOF" >> $GITHUB_ENV
                echo "$APP_CONTENT" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
                
                # Set a simple test variable to verify environment variable functionality
                echo "APP_TEST=APP_TEST_VALUE" >> $GITHUB_ENV
            
            - name: Verify Environment Variables
              run: |
                echo "Testing environment variables:"
                echo "API_TEST: ${{ env.API_TEST }}"
                echo "APP_TEST: ${{ env.APP_TEST }}"
                
                echo "API_CONTENT empty? $(if [ -z "${{ env.API_CONTENT }}" ]; then echo "YES"; else echo "NO"; fi)"
                echo "APP_CONTENT empty? $(if [ -z "${{ env.APP_CONTENT }}" ]; then echo "YES"; else echo "NO"; fi)"
                
                # If content exists, show the first few characters
                if [ -n "${{ env.API_CONTENT }}" ]; then
                  echo "API_CONTENT first 50 chars: $(echo "${{ env.API_CONTENT }}" | head -c 50)"
                fi
                
                if [ -n "${{ env.APP_CONTENT }}" ]; then
                  echo "APP_CONTENT first 50 chars: $(echo "${{ env.APP_CONTENT }}" | head -c 50)"
                fi
