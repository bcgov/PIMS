name: Create JIRA Dependency Tickets
# This workflow creates JIRA tickets for any issues found during the validate workflow.

on:
    workflow_run:
        workflows: ['NPM Dependency Reports']
        types: [completed]
        branches:
            - 'main'
    pull_request:
        branches:
            - 'main'
        types: [synchronize]
    workflow_dispatch:

jobs:
    deploy:
        runs-on: ubuntu-latest
        # if: ${{ github.event.workflow_run.conclusion == 'success' }}
        steps: 
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Get API NPM Dependency Issues
              id: get_api_issue
              run: |
                # Get issue content
                API_CONTENT=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues?state=open" | \
                  jq -r '.[] | select(.title == "express-api NPM Dependency Report") | .body')
                
                # Store the content in an environment variable for use in the next steps
                echo "API_CONTENT<<EOF" >> $GITHUB_ENV
                echo "$API_CONTENT" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
                
                echo "Found issue content for express-api NPM Dependency Report"
            
            - name: Get APP NPM Dependency Issues
              id: get_app_issue
              run: |
                # Get issue content
                APP_CONTENT=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues?state=open" | \
                  jq -r '.[] | select(.title == "react-app NPM Dependency Report") | .body')
                
                # Store the content in an environment variable for use in the next steps
                echo "APP_CONTENT<<EOF" >> $GITHUB_ENV
                echo "$APP_CONTENT" >> $GITHUB_ENV
                echo "EOF" >> $GITHUB_ENV
                
                echo "Found issue content for react-app NPM Dependency Report"
          
            # Send issue content to JIRA webhook using curl
            - name: Create JIRA Tickets
              run: |
                # Create JIRA ticket for API issues
                if [ -n "${{ env.API_CONTENT }}" ]; then
                  echo "Sending API dependency report to Jira..."
                  API_RESPONSE=$(curl -X POST \
                    -H "Content-Type: application/json" \
                    -H "X-Automation-Webhook-Token: ${{ secrets.JIRA_API_TOKEN }}" \
                    --data "${{ env.API_CONTENT }}" \
                    -w "\n%{http_code}" \
                    -s \
                    "${{ secrets.JIRA_WEBHOOK_URL }}")
                  
                  API_HTTP_CODE=$(echo "$API_RESPONSE" | tail -n1)
                  API_CONTENT_RESPONSE=$(echo "$API_RESPONSE" | sed '$d')
                  
                  echo "API Request Status Code: $API_HTTP_CODE"
                  
                  if [ "$API_HTTP_CODE" -ge 200 ] && [ "$API_HTTP_CODE" -lt 300 ]; then
                    echo "✅ API Jira ticket created successfully"
                  else
                    echo "❌ Failed to create API Jira ticket. Status code: $API_HTTP_CODE"
                    echo "Response: $API_CONTENT_RESPONSE"
                    exit 1
                  fi
                else
                  echo "No API content found to send to Jira"
                fi
                
                # Create JIRA ticket for APP issues
                if [ -n "${{ env.APP_CONTENT }}" ]; then
                  echo "Sending APP dependency report to Jira..."
                  APP_RESPONSE=$(curl -X POST \
                    -H "Content-Type: application/json" \
                    -H "X-Automation-Webhook-Token: ${{ secrets.JIRA_API_TOKEN }}" \
                    --data "${{ env.APP_CONTENT }}" \
                    -w "\n%{http_code}" \
                    -s \
                    "${{ secrets.JIRA_WEBHOOK_URL }}")
                  
                  APP_HTTP_CODE=$(echo "$APP_RESPONSE" | tail -n1)
                  APP_CONTENT_RESPONSE=$(echo "$APP_RESPONSE" | sed '$d')
                  
                  echo "APP Request Status Code: $APP_HTTP_CODE"
                  
                  if [ "$APP_HTTP_CODE" -ge 200 ] && [ "$APP_HTTP_CODE" -lt 300 ]; then
                    echo "✅ APP Jira ticket created successfully"
                  else
                    echo "❌ Failed to create APP Jira ticket. Status code: $APP_HTTP_CODE"
                    echo "Response: $APP_CONTENT_RESPONSE"
                    exit 1
                  fi
                else
                  echo "No APP content found to send to Jira"
                fi


