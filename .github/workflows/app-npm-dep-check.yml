name: NPM Dependency Reports

permissions:
  contents: read
  issues: write
on:
  schedule:
    - cron: '0 15 * * 2' # Tuesday morning at 7:00-8:00am Pacific Time.
  pull_request:
      branches:
          - 'main'
      paths:
          - '.github/workflows/create-jira-tickets.yml'
      types: [synchronize]
  workflow_dispatch:

# START HERE! v

# ADD REQUIRED FILES:
# - .github/helpers/parse-json5-config.js
# - .github/helpers/npm-deps/parse-npm-deps.cjs
# - .github/helpers/npm-deps/create-report.cjs
# - .github/helpers/npm-deps/create-report-issues.cjs
# - .github/helpers/github-api/github-api-requests.cjs
# - .github/helpers/github-api/create-and-close-existing-issue.cjs
# - .github/config/dep-report.json5

# EDIT .github/config/dep-report.json5
# DO NOT Edit below env variables.
env:
  GITHUB_REPOSITORY: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Parse Vars from config.
  parse-json5-config:
      runs-on: ubuntu-22.04
      outputs:
        # save output from dep-report.json5 to Github env variables
        packageJsonPaths: ${{ steps.parse_config.outputs.packageJsonPaths }}
        ignoreList: ${{ steps.parse_config.outputs.ignoreList }}
        depLevels: ${{ steps.parse_config.outputs.depLevels }}

      steps:
        # Checkout branch.
        - name: Checkout Repository
          uses: actions/checkout@v4

        # Install json5 npm package for parsing config.
        - name: Install Dependencies
          run: npm install json5 os

        # Run script to convert json5 config to Output Vars.
        - name: Run Script
          id: parse_config
          run: node .github/helpers/parse-json5-config .github/config/dep-report.json5

  # Check package versions for updates.
  parse-package-versions:
    runs-on: ubuntu-22.04
    needs: parse-json5-config
    env:
      packageJsonPaths: ${{ needs.parse-json5-config.outputs.packageJsonPaths }}
    container:
      # Lightweight NodeJS Image
      image: node:21.5-bullseye-slim

    steps:
      # Checkout branch.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Run NodeJS script to check for latest npm dependency versions and capture output.
      - name: Run NPM DEP Check Node.js script
        id: check_versions
        run: |
          node .github/helpers/npm-deps/parse-npm-deps.cjs > outdatedDeps.json

      # Upload the output as an artifact.
      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: outdatedDeps
          path: outdatedDeps.json

  # Create comment text
  create-comment-text:
    runs-on: ubuntu-22.04
    needs:
      - parse-json5-config
      - parse-package-versions
    env:
      ignoreList: ${{ needs.parse-json5-config.outputs.ignoreList }}
      depLevels: ${{ needs.parse-json5-config.outputs.depLevels }}
    outputs:
        commentContents: ${{ steps.create_comment.outputs.commentContents }}
    steps:
      # download artifact from parse-package-versions
      - name: Download output
        uses: actions/download-artifact@v4
        with:
          name: outdatedDeps
          path: .

      # encode file to github needs
      - name: Encode Outdated Deps
        shell: bash
        run: |
          OUTPUT=$(cat outdatedDeps.json)
          OUTPUT="${OUTPUT//'%'/'%25'}"
          OUTPUT="${OUTPUT//$'\n'/'%0A'}"
          OUTPUT="${OUTPUT//$'\r'/'%0D'}"
          echo "DEP_INPUT=${OUTPUT}" >> $GITHUB_ENV

      # checkout repo and branch
      - name: Checkout Branch
        uses: actions/checkout@v4

      # setup Python environment
      - name: setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # current Python version

      # Run Python Script to Create Comment
      - name: Create Comment Contents
        id: create_comment
        env:
          DEP_INPUT: ${{ env.DEP_INPUT }} # dependency updates
        run: |
          python3 .github/helpers/npm-deps/parse_to_comment.py

  # Write the output text for the GitHub Issue.
  write-output:
    needs:
      - parse-json5-config
      - parse-package-versions
    runs-on: ubuntu-22.04
    env:
      packageJsonPaths: ${{ needs.parse-json5-config.outputs.packageJsonPaths }}
    container:
      # Lightweight NodeJS Image
      image: node:21.5-bullseye-slim

    steps:
      # Checkout branch.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download the output artifact from parse-package-versions.
      - name: Download output
        uses: actions/download-artifact@v4
        with:
          name: outdatedDeps
          path: .

      # Run NodeJS script to create GitHub Issue body.
      - name: Run NPM DEP Check Node.js script
        id: check_versions
        run: |
          node .github/helpers/npm-deps/create-report.cjs > outputText.json

      # Upload the output as an artifact.
      - name: Upload output
        uses: actions/upload-artifact@v4
        with:
          name: outputText
          path: outputText.json

  # Create the GitHub Issues.
  create-issues:
    needs:
      - parse-json5-config
      - create-comment-text
      - write-output
    runs-on: ubuntu-22.04
    env:
      packageJsonPaths: ${{ needs.parse-json5-config.outputs.packageJsonPaths }}
      commentContents: ${{ needs.create-comment-text.outputs.commentContents }}
    container:
      # Lightweight NodeJS Image
      image: node:21.5-bullseye-slim

    steps:
      # Checkout branch.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download the output artifact.
      - name: Download output
        uses: actions/download-artifact@v4
        with:
          name: outputText
          path: .

      # Install @octokit/rest npm package for making GitHub rest API requests.
      - name: Install @octokit/rest npm
        run: npm i @octokit/rest

      # Run Node Script to Create GitHub Issue.
      - name: Create GitHub Issues
        run: |
          node .github/helpers/npm-deps/create-report-issues.cjs

  create-jira-tickets:
    runs-on: ubuntu-22.04
    needs:
      - create-comment-text
    env:
      commentContents: ${{ needs.create-comment-text.outputs.commentContents }}
    steps:

      # setup Python environment
      - name: setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # current Python version

       # Save comment data to JSON file
      - name: Save comment data to file
        run: |
          echo '${{ env.commentContents }}' > comment_data.json
          echo "Saved comment data to JSON file"

      # Extract react-app property from commentContents
      - name: Extract React App Dependencies
        run: |
          echo "Extracting react-app data from comment contents"
          cat > extract_react.py << 'EOL'
          import json
          try:
              with open('comment_data.json', 'r') as f:
                  data = json.loads(f.read())
                  print(data.get('react-app', ''))
          except Exception as e:
              print(f"Error: {e}")
              exit(1)
          EOL
          REACT_APP_CONTENT=$(python extract_react.py)
          echo "$REACT_APP_CONTENT" > app_content.txt
      
      # Extract express-api property from commentContents
      - name: Extract Express API Dependencies
        run: |
          echo "Extracting express-api data from comment contents"
          cat > extract_express.py << 'EOL'
          import json
          try:
              with open('comment_data.json', 'r') as f:
                  data = json.loads(f.read())
                  print(data.get('express-api', ''))
          except Exception as e:
              print(f"Error: {e}")
              exit(1)
          EOL
          EXPRESS_API_CONTENT=$(python extract_express.py)
          echo "$EXPRESS_API_CONTENT" > api_content.txt

      # Send issue content to JIRA webhook using curl
      - name: Create API JIRA Ticket
        run: |           
            # Create JIRA ticket for API issues
            if [ -s api_content.txt ]; then
              echo "Sending API dependency report to Jira..."
              
              # Debug: check the content
              echo "File size: $(wc -c api_content.txt)"
              echo "First few characters:"
              head -c 100 api_content.txt
              
              # Prepare the payload by wrapping the content in the expected structure
              jq -n --arg title "express-api NPM Dependency Report" \
                    --arg body "$(cat api_content.txt)" \
                    '{
                      "data": {
                        "title": $title,
                        "body": $body
                      }
                    }' > api_payload.json
              
              API_RESPONSE=$(curl -X POST \
                -H "Content-Type: application/json" \
                -H "X-Automation-Webhook-Token: ${{ secrets.JIRA_API_TOKEN }}" \
                --data @api_payload.json \
                -w "\n%{http_code}" \
                -s \
                "${{ secrets.JIRA_WEBHOOK_URL }}")
              
              API_HTTP_CODE=$(echo "$API_RESPONSE" | tail -n1)
              API_CONTENT_RESPONSE=$(echo "$API_RESPONSE" | sed '$d')
              
              echo "API Request Status Code: $API_HTTP_CODE"
              
              if [ "$API_HTTP_CODE" -ge 200 ] && [ "$API_HTTP_CODE" -lt 300 ]; then
                echo "✅ API Jira ticket created successfully"
              else
                echo "❌ Failed to create API Jira ticket. Status code: $API_HTTP_CODE"
                echo "Response: $API_CONTENT_RESPONSE"
              fi
            else
              echo "No API content found to send to Jira"
            fi

      - name: Create APP JIRA Ticket
        run: | 
            # Create JIRA ticket for APP issues
            if [ -s app_content.txt ]; then
              echo "Sending APP dependency report to Jira..."
              
              # Debug: check the content
              echo "File size: $(wc -c app_content.txt)"
              echo "First few characters:"
              head -c 100 app_content.txt
              
              # Prepare the payload by wrapping the content in the expected structure
              jq -n --arg title "react-app NPM Dependency Report" \
                    --arg body "$(cat app_content.txt)" \
                    '{
                      "data": {
                        "title": $title,
                        "body": $body
                      }
                    }' > app_payload.json
              
              APP_RESPONSE=$(curl -X POST \
                -H "Content-Type: application/json" \
                -H "X-Automation-Webhook-Token: ${{ secrets.JIRA_API_TOKEN }}" \
                --data @app_payload.json \
                -w "\n%{http_code}" \
                -s \
                "${{ secrets.JIRA_WEBHOOK_URL }}")
              
              APP_HTTP_CODE=$(echo "$APP_RESPONSE" | tail -n1)
              APP_CONTENT_RESPONSE=$(echo "$APP_RESPONSE" | sed '$d')
              
              echo "APP Request Status Code: $APP_HTTP_CODE"
              
              if [ "$APP_HTTP_CODE" -ge 200 ] && [ "$APP_HTTP_CODE" -lt 300 ]; then
                echo "✅ APP Jira ticket created successfully"
              else
                echo "❌ Failed to create APP Jira ticket. Status code: $APP_HTTP_CODE"
                echo "Response: $APP_CONTENT_RESPONSE" 
              fi
            else
              echo "No APP content found to send to Jira"
            fi
